"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[808],{3905:function(t,e,i){i.d(e,{Zo:function(){return l},kt:function(){return d}});var n=i(7294);function r(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function a(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){r(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function s(t,e){if(null==t)return{};var i,n,r=function(t,e){if(null==t)return{};var i,n,r={},o=Object.keys(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||(r[i]=t[i]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)i=o[n],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}var c=n.createContext({}),p=function(t){var e=n.useContext(c),i=e;return t&&(i="function"==typeof t?t(e):a(a({},e),t)),i},l=function(t){var e=p(t.components);return n.createElement(c.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var i=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=p(i),d=r,m=u["".concat(c,".").concat(d)]||u[d]||h[d]||o;return i?n.createElement(m,a(a({ref:e},l),{},{components:i})):n.createElement(m,a({ref:e},l))}));function d(t,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=i.length,a=new Array(o);a[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s.mdxType="string"==typeof t?t:r,a[1]=s;for(var p=2;p<o;p++)a[p]=i[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},8522:function(t,e,i){i.r(e),i.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return h}});var n=i(3117),r=i(102),o=(i(7294),i(3905)),a=["components"],s={id:"dispatch-test",title:"Test Core",sidebar_label:"Test Core"},c=void 0,p={unversionedId:"modules/dispatch-test",id:"modules/dispatch-test",title:"Test Core",description:"Test helpers for the [dispatch-core] module. Most of the tools you need to automatically",source:"@site/docs/modules/dispatch-test.md",sourceDirName:"modules",slug:"/modules/dispatch-test",permalink:"/Dispatch/docs/next/modules/dispatch-test",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/docs/modules/dispatch-test.md",tags:[],version:"current",frontMatter:{id:"dispatch-test",title:"Test Core",sidebar_label:"Test Core"},sidebar:"Docs",previous:{title:"ViewModel",permalink:"/Dispatch/docs/next/modules/dispatch-android-viewmodel"},next:{title:"Test JUnit4",permalink:"/Dispatch/docs/next/modules/dispatch-test-junit4"}},l={},h=[{value:"TestDispatcherProvider",id:"testdispatcherprovider",level:2},{value:"Constructor with default arguments",id:"constructor-with-default-arguments",level:3},{value:"Single-arg factory",id:"single-arg-factory",level:3},{value:"Basic TestDispatcherProvider",id:"basic-testdispatcherprovider",level:3},{value:"TestProvidedCoroutineScope",id:"testprovidedcoroutinescope",level:2},{value:"Builders",id:"builders",level:2},{value:"Minimum Gradle Config",id:"minimum-gradle-config",level:3}],u={toc:h};function d(t){var e=t.components,i=(0,r.Z)(t,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Test helpers for the ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/index.html"},"dispatch-core")," module. Most of the tools you need to automatically\nhandle ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," in your tests.  (see ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit4/dispatch.test/index.html"},"dispatch-test-junit4")," or ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test-junit5/dispatch.test/index.html"},"dispatch-test-junit5"),"\nfor the rest.)"),(0,o.kt)("h2",{id:"testdispatcherprovider"},"TestDispatcherProvider"),(0,o.kt)("p",null,"Testing version of the ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," with three main styles of creation:"),(0,o.kt)("h3",{id:"constructor-with-default-arguments"},"Constructor with default arguments"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"(link)")),(0,o.kt)("p",null,"Each property becomes its own ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/index.html"},"TestCoroutineDispatcher")," by default, but may be replaced by\nany ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val customTestDispatcherProvider = TestDispatcherProvider(\n  default = newSingleThreadContext("default"),\n  io = newSingleThreadContext("io"),\n  main = newSingleThreadContext("main"),\n  mainImmediate = newSingleThreadContext("main immediate"),\n  unconfined = newSingleThreadContext("unconfined")\n)\n\nval defaultTetsDispatcherProvider = TestDispatcherProvider()\n')),(0,o.kt)("h3",{id:"single-arg-factory"},"Single-arg factory"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"(link)")),(0,o.kt)("p",null,"Another option is to pass a single ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html"},"CoroutineDispatcher"),", which is then used to populate all fields."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val dispatcher = newSingleThreadContext("custom")\n\nval dispatcherProvider = TestDispatcherProvider(dispatcher)\n\ndispatcherProvider.default shouldBe myDispatcher\ndispatcherProvider.io shouldBe myDispatcher\ndispatcherProvider.main shouldBe myDispatcher\ndispatcherProvider.mainImmediate shouldBe myDispatcher\ndispatcherProvider.unconfined shouldBe myDispatcher\n')),(0,o.kt)("h3",{id:"basic-testdispatcherprovider"},"Basic TestDispatcherProvider"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-dispatcher-provider/index.html"},"(link)")),(0,o.kt)("p",null,"Sometimes we want to have the normal dispatch behaviors of a production environment, just without\nthe awkward mechanics of ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/kotlinx.coroutines.-dispatchers/set-main.html"},"Dispatchers.setMain"),"."),(0,o.kt)("p",null,"This is essentially ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-default-dispatcher-provider/index.html"},"DefaultDispatcherProvider")," except with\na ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html"},"single-threaded executor"),' handling the "main" thread.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun TestBasicDispatcherProvider(): TestDispatcherProvider {\n\n  val mainThread = newSingleThreadContext("main thread proxy")\n\n  return TestDispatcherProvider(\n    default = Dispatchers.Default,\n    io = Dispatchers.IO,\n    main = mainThread,\n    mainImmediate = mainThread,\n    unconfined = Dispatchers.Unconfined\n  )\n}\n')),(0,o.kt)("h2",{id:"testprovidedcoroutinescope"},"TestProvidedCoroutineScope"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/-test-provided-coroutine-scope/index.html"},"(link)")),(0,o.kt)("p",null,"A polymorphic ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," which implements all the type-safe versions from ",(0,o.kt)("a",{parentName:"p",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/index.html"},"dispatch-core"),", as\nwell as ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html"},"TestCoroutineScope"),"."),(0,o.kt)("p",null,"This type may be injected anywhere, regardless of the requirement."),(0,o.kt)("h2",{id:"builders"},"Builders"),(0,o.kt)("p",null,"Sometimes, instead of explicitly creating a ",(0,o.kt)("a",{parentName:"p",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope")," object, we prefer to just use a\ncoroutineScope builder function within a function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Test\nfun some_test() = runBlockingProvided {\n  someSuspendFunction()\n}\n\n@Test\nfun some_test() = testProvided {\n  someSuspendFunctionWithADelay()\n}\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Name")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Description")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/run-blocking-provided.html"},"runBlockingProvided")),(0,o.kt)("td",{parentName:"tr",align:null},"Uses ",(0,o.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html"},"runBlocking"),", but injects a ",(0,o.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," into its ",(0,o.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html"},"CoroutineScope"),". Use this function if you want normal dispatch behavior.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-test/dispatch.test/test-provided.html"},"testProvided")),(0,o.kt)("td",{parentName:"tr",align:null},"Uses ",(0,o.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html"},"runBlockingTest"),", but injects a ",(0,o.kt)("a",{parentName:"td",href:"https://rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html"},"DispatcherProvider")," into its ",(0,o.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html"},"TestCoroutineScope"),". Use this function if you want the explicit time control of ",(0,o.kt)("a",{parentName:"td",href:"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html"},"runBlockingTest"),".")))),(0,o.kt)("h3",{id:"minimum-gradle-config"},"Minimum Gradle Config"),(0,o.kt)("p",null,"Add to your module's ",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  // core\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n  implementation("com.rickbusarow.dispatch:dispatch-core:1.0.0-beta10")\n\n  testImplementation("com.rickbusarow.dispatch:dispatch-test:1.0.0-beta10")\n  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2")\n}\n')))}d.isMDXComponent=!0}}]);