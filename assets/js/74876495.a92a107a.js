"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[49],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var s=r.createContext({}),p=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},d=function(t){var e=p(t.components);return r.createElement(s.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},l=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,s=t.parentName,d=c(t,["components","mdxType","originalType","parentName"]),l=p(n),m=i,h=l["".concat(s,".").concat(m)]||l[m]||u[m]||o;return n?r.createElement(h,a(a({ref:e},d),{},{components:n})):r.createElement(h,a({ref:e},d))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,a=new Array(o);a[0]=l;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c.mdxType="string"==typeof t?t:i,a[1]=c;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},4235:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],c={id:"quickstart",title:"Quick Start",sidebar_label:"Quick Start"},s=void 0,p={unversionedId:"quickstart",id:"quickstart",title:"Quick Start",description:"[DispatcherProvider]//rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html",source:"@site/docs/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/Dispatch/docs/next/quickstart",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/docs/quickstart.mdx",tags:[],version:"current",frontMatter:{id:"quickstart",title:"Quick Start",sidebar_label:"Quick Start"},sidebar:"Docs",previous:{title:"Intro",permalink:"/Dispatch/docs/next/"},next:{title:"Core",permalink:"/Dispatch/docs/next/modules/dispatch-core"}},d={},u=[],l={toc:u};function m(t){var e=t.components,n=(0,i.Z)(t,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://search.maven.org/search?q=com.rickbusarow.dispatch"},(0,o.kt)("img",{src:"https://img.shields.io/maven-central/v/com.rickbusarow.dispatch/dispatch-core.svg?label=Maven%20Central"}))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  /*\n  production code\n  */\n\n  // core coroutines\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n\n  // everything provides :core via "api", so you only need this if you have no other "implementation" dispatch artifacts\n  implementation("com.rickbusarow.dispatch:dispatch-core:1.0.0-beta10")\n  // LifecycleCoroutineScope for Android Fragments, Activities, etc.\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle:1.0.0-beta10")\n  // lifecycleScope extension function with a settable factory.  Use this if you don\'t DI your CoroutineScopes\n  // This provides :dispatch-android-lifecycle via "api", so you don\'t need to declare both\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle-extensions:1.0.0-beta10")\n  // ViewModelScope for Android ViewModels\n  implementation("com.rickbusarow.dispatch:dispatch-android-viewmodel:1.0.0-beta10")\n\n  /*\n  jvm testing\n  */\n\n  // core coroutines-test\n  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2")\n  // you only need this if you don\'t have the -junit4 or -junit5 artifacts\n  testImplementation("com.rickbusarow.dispatch:dispatch-test:1.0.0-beta10")\n  // CoroutineTestRule and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit5\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit4:1.0.0-beta10")\n  // CoroutineTest, CoroutineTestExtension, and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit4\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit5:1.0.0-beta10")\n  /*\n  Android testing\n  */\n\n  // core android\n  androidTestImplementation("androidx.test:runner:1.3.0")\n  androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")\n  // IdlingDispatcher, IdlingDispatcherProvider, and IdlingCoroutineScope\n  androidTestImplementation("com.rickbusarow.dispatch:dispatch-android-espresso:1.0.0-beta10")\n}\n')))}m.isMDXComponent=!0}}]);