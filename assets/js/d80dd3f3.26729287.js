"use strict";(self.webpackChunkdispatch=self.webpackChunkdispatch||[]).push([[89],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(n),m=i,h=l["".concat(c,".").concat(m)]||l[m]||u[m]||o;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},7960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=["components"],s={id:"quickstart",title:"Quick Start",sidebar_label:"Quick Start"},c=void 0,p={unversionedId:"quickstart",id:"version-1.0.0-beta10/quickstart",title:"Quick Start",description:"[DispatcherProvider]//rbusarow.github.io/Dispatch/api/dispatch-core/dispatch.core/-dispatcher-provider/index.html",source:"@site/versioned_docs/version-1.0.0-beta10/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/Dispatch/docs/quickstart",draft:!1,editUrl:"https://github.com/rbusarow/Dispatch/edit/main/website/versioned_docs/version-1.0.0-beta10/quickstart.mdx",tags:[],version:"1.0.0-beta10",frontMatter:{id:"quickstart",title:"Quick Start",sidebar_label:"Quick Start"},sidebar:"version-1.0.0-beta10/Basics",previous:{title:"Intro",permalink:"/Dispatch/docs/"},next:{title:"Core",permalink:"/Dispatch/docs/modules/dispatch-core"}},d={},u=[],l={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://search.maven.org/search?q=com.rickbusarow.dispatch"},(0,o.kt)("img",{src:"https://img.shields.io/maven-central/v/com.rickbusarow.dispatch/dispatch-core.svg?label=Maven%20Central"}))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'repositories {\n  mavenCentral()\n}\n\ndependencies {\n\n  /*\n  production code\n  */\n\n  // core coroutines\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")\n  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2")\n\n  // everything provides :core via "api", so you only need this if you have no other "implementation" dispatch artifacts\n  implementation("com.rickbusarow.dispatch:dispatch-core:1.0.0-beta10")\n  // LifecycleCoroutineScope for Android Fragments, Activities, etc.\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle:1.0.0-beta10")\n  // lifecycleScope extension function with a settable factory.  Use this if you don\'t DI your CoroutineScopes\n  // This provides :dispatch-android-lifecycle via "api", so you don\'t need to declare both\n  implementation("com.rickbusarow.dispatch:dispatch-android-lifecycle-extensions:1.0.0-beta10")\n  // ViewModelScope for Android ViewModels\n  implementation("com.rickbusarow.dispatch:dispatch-android-viewmodel:1.0.0-beta10")\n\n  /*\n  jvm testing\n  */\n\n  // core coroutines-test\n  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.2")\n  // you only need this if you don\'t have the -junit4 or -junit5 artifacts\n  testImplementation("com.rickbusarow.dispatch:dispatch-test:1.0.0-beta10")\n  // CoroutineTestRule and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit5\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit4:1.0.0-beta10")\n  // CoroutineTest, CoroutineTestExtension, and :dispatch-test\n  // This provides :dispatch-test via "api", so you don\'t need to declare both\n  // This can be used at the same time as :dispatch-test-junit4\n  testImplementation("com.rickbusarow.dispatch:dispatch-test-junit5:1.0.0-beta10")\n  /*\n  Android testing\n  */\n\n  // core android\n  androidTestImplementation("androidx.test:runner:1.3.0")\n  androidTestImplementation("androidx.test.espresso:espresso-core:3.3.0")\n  // IdlingDispatcher, IdlingDispatcherProvider, and IdlingCoroutineScope\n  androidTestImplementation("com.rickbusarow.dispatch:dispatch-android-espresso:1.0.0-beta10")\n}\n')))}m.isMDXComponent=!0}}]);